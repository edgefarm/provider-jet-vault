//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by controller-gen. DO NOT EDIT.

package v1alpha1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PolicyIdentifierObservation) DeepCopyInto(out *PolicyIdentifierObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PolicyIdentifierObservation.
func (in *PolicyIdentifierObservation) DeepCopy() *PolicyIdentifierObservation {
	if in == nil {
		return nil
	}
	out := new(PolicyIdentifierObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PolicyIdentifierParameters) DeepCopyInto(out *PolicyIdentifierParameters) {
	*out = *in
	if in.Cps != nil {
		in, out := &in.Cps, &out.Cps
		*out = new(string)
		**out = **in
	}
	if in.Notice != nil {
		in, out := &in.Notice, &out.Notice
		*out = new(string)
		**out = **in
	}
	if in.Oid != nil {
		in, out := &in.Oid, &out.Oid
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PolicyIdentifierParameters.
func (in *PolicyIdentifierParameters) DeepCopy() *PolicyIdentifierParameters {
	if in == nil {
		return nil
	}
	out := new(PolicyIdentifierParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretBackendConfigUrls) DeepCopyInto(out *SecretBackendConfigUrls) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretBackendConfigUrls.
func (in *SecretBackendConfigUrls) DeepCopy() *SecretBackendConfigUrls {
	if in == nil {
		return nil
	}
	out := new(SecretBackendConfigUrls)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *SecretBackendConfigUrls) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretBackendConfigUrlsList) DeepCopyInto(out *SecretBackendConfigUrlsList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]SecretBackendConfigUrls, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretBackendConfigUrlsList.
func (in *SecretBackendConfigUrlsList) DeepCopy() *SecretBackendConfigUrlsList {
	if in == nil {
		return nil
	}
	out := new(SecretBackendConfigUrlsList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *SecretBackendConfigUrlsList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretBackendConfigUrlsObservation) DeepCopyInto(out *SecretBackendConfigUrlsObservation) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretBackendConfigUrlsObservation.
func (in *SecretBackendConfigUrlsObservation) DeepCopy() *SecretBackendConfigUrlsObservation {
	if in == nil {
		return nil
	}
	out := new(SecretBackendConfigUrlsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretBackendConfigUrlsParameters) DeepCopyInto(out *SecretBackendConfigUrlsParameters) {
	*out = *in
	if in.Backend != nil {
		in, out := &in.Backend, &out.Backend
		*out = new(string)
		**out = **in
	}
	if in.BackendRef != nil {
		in, out := &in.BackendRef, &out.BackendRef
		*out = new(v1.Reference)
		**out = **in
	}
	if in.BackendSelector != nil {
		in, out := &in.BackendSelector, &out.BackendSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.CrlDistributionPoints != nil {
		in, out := &in.CrlDistributionPoints, &out.CrlDistributionPoints
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.IssuingCertificates != nil {
		in, out := &in.IssuingCertificates, &out.IssuingCertificates
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Namespace != nil {
		in, out := &in.Namespace, &out.Namespace
		*out = new(string)
		**out = **in
	}
	if in.OcspServers != nil {
		in, out := &in.OcspServers, &out.OcspServers
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretBackendConfigUrlsParameters.
func (in *SecretBackendConfigUrlsParameters) DeepCopy() *SecretBackendConfigUrlsParameters {
	if in == nil {
		return nil
	}
	out := new(SecretBackendConfigUrlsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretBackendConfigUrlsSpec) DeepCopyInto(out *SecretBackendConfigUrlsSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretBackendConfigUrlsSpec.
func (in *SecretBackendConfigUrlsSpec) DeepCopy() *SecretBackendConfigUrlsSpec {
	if in == nil {
		return nil
	}
	out := new(SecretBackendConfigUrlsSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretBackendConfigUrlsStatus) DeepCopyInto(out *SecretBackendConfigUrlsStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretBackendConfigUrlsStatus.
func (in *SecretBackendConfigUrlsStatus) DeepCopy() *SecretBackendConfigUrlsStatus {
	if in == nil {
		return nil
	}
	out := new(SecretBackendConfigUrlsStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretBackendRole) DeepCopyInto(out *SecretBackendRole) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretBackendRole.
func (in *SecretBackendRole) DeepCopy() *SecretBackendRole {
	if in == nil {
		return nil
	}
	out := new(SecretBackendRole)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *SecretBackendRole) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretBackendRoleList) DeepCopyInto(out *SecretBackendRoleList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]SecretBackendRole, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretBackendRoleList.
func (in *SecretBackendRoleList) DeepCopy() *SecretBackendRoleList {
	if in == nil {
		return nil
	}
	out := new(SecretBackendRoleList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *SecretBackendRoleList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretBackendRoleObservation) DeepCopyInto(out *SecretBackendRoleObservation) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretBackendRoleObservation.
func (in *SecretBackendRoleObservation) DeepCopy() *SecretBackendRoleObservation {
	if in == nil {
		return nil
	}
	out := new(SecretBackendRoleObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretBackendRoleParameters) DeepCopyInto(out *SecretBackendRoleParameters) {
	*out = *in
	if in.AllowAnyName != nil {
		in, out := &in.AllowAnyName, &out.AllowAnyName
		*out = new(bool)
		**out = **in
	}
	if in.AllowBareDomains != nil {
		in, out := &in.AllowBareDomains, &out.AllowBareDomains
		*out = new(bool)
		**out = **in
	}
	if in.AllowGlobDomains != nil {
		in, out := &in.AllowGlobDomains, &out.AllowGlobDomains
		*out = new(bool)
		**out = **in
	}
	if in.AllowIPSans != nil {
		in, out := &in.AllowIPSans, &out.AllowIPSans
		*out = new(bool)
		**out = **in
	}
	if in.AllowLocalhost != nil {
		in, out := &in.AllowLocalhost, &out.AllowLocalhost
		*out = new(bool)
		**out = **in
	}
	if in.AllowSubdomains != nil {
		in, out := &in.AllowSubdomains, &out.AllowSubdomains
		*out = new(bool)
		**out = **in
	}
	if in.AllowedDomains != nil {
		in, out := &in.AllowedDomains, &out.AllowedDomains
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.AllowedDomainsTemplate != nil {
		in, out := &in.AllowedDomainsTemplate, &out.AllowedDomainsTemplate
		*out = new(bool)
		**out = **in
	}
	if in.AllowedOtherSans != nil {
		in, out := &in.AllowedOtherSans, &out.AllowedOtherSans
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.AllowedSerialNumbers != nil {
		in, out := &in.AllowedSerialNumbers, &out.AllowedSerialNumbers
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.AllowedURISans != nil {
		in, out := &in.AllowedURISans, &out.AllowedURISans
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Backend != nil {
		in, out := &in.Backend, &out.Backend
		*out = new(string)
		**out = **in
	}
	if in.BackendRef != nil {
		in, out := &in.BackendRef, &out.BackendRef
		*out = new(v1.Reference)
		**out = **in
	}
	if in.BackendSelector != nil {
		in, out := &in.BackendSelector, &out.BackendSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.BasicConstraintsValidForNonCA != nil {
		in, out := &in.BasicConstraintsValidForNonCA, &out.BasicConstraintsValidForNonCA
		*out = new(bool)
		**out = **in
	}
	if in.ClientFlag != nil {
		in, out := &in.ClientFlag, &out.ClientFlag
		*out = new(bool)
		**out = **in
	}
	if in.CodeSigningFlag != nil {
		in, out := &in.CodeSigningFlag, &out.CodeSigningFlag
		*out = new(bool)
		**out = **in
	}
	if in.Country != nil {
		in, out := &in.Country, &out.Country
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.EmailProtectionFlag != nil {
		in, out := &in.EmailProtectionFlag, &out.EmailProtectionFlag
		*out = new(bool)
		**out = **in
	}
	if in.EnforceHostnames != nil {
		in, out := &in.EnforceHostnames, &out.EnforceHostnames
		*out = new(bool)
		**out = **in
	}
	if in.ExtKeyUsage != nil {
		in, out := &in.ExtKeyUsage, &out.ExtKeyUsage
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.GenerateLease != nil {
		in, out := &in.GenerateLease, &out.GenerateLease
		*out = new(bool)
		**out = **in
	}
	if in.KeyBits != nil {
		in, out := &in.KeyBits, &out.KeyBits
		*out = new(float64)
		**out = **in
	}
	if in.KeyType != nil {
		in, out := &in.KeyType, &out.KeyType
		*out = new(string)
		**out = **in
	}
	if in.KeyUsage != nil {
		in, out := &in.KeyUsage, &out.KeyUsage
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Locality != nil {
		in, out := &in.Locality, &out.Locality
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.MaxTTL != nil {
		in, out := &in.MaxTTL, &out.MaxTTL
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Namespace != nil {
		in, out := &in.Namespace, &out.Namespace
		*out = new(string)
		**out = **in
	}
	if in.NoStore != nil {
		in, out := &in.NoStore, &out.NoStore
		*out = new(bool)
		**out = **in
	}
	if in.NotBeforeDuration != nil {
		in, out := &in.NotBeforeDuration, &out.NotBeforeDuration
		*out = new(string)
		**out = **in
	}
	if in.Organization != nil {
		in, out := &in.Organization, &out.Organization
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Ou != nil {
		in, out := &in.Ou, &out.Ou
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.PolicyIdentifier != nil {
		in, out := &in.PolicyIdentifier, &out.PolicyIdentifier
		*out = make([]PolicyIdentifierParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.PolicyIdentifiers != nil {
		in, out := &in.PolicyIdentifiers, &out.PolicyIdentifiers
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.PostalCode != nil {
		in, out := &in.PostalCode, &out.PostalCode
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Province != nil {
		in, out := &in.Province, &out.Province
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.RequireCn != nil {
		in, out := &in.RequireCn, &out.RequireCn
		*out = new(bool)
		**out = **in
	}
	if in.ServerFlag != nil {
		in, out := &in.ServerFlag, &out.ServerFlag
		*out = new(bool)
		**out = **in
	}
	if in.StreetAddress != nil {
		in, out := &in.StreetAddress, &out.StreetAddress
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.TTL != nil {
		in, out := &in.TTL, &out.TTL
		*out = new(string)
		**out = **in
	}
	if in.UseCsrCommonName != nil {
		in, out := &in.UseCsrCommonName, &out.UseCsrCommonName
		*out = new(bool)
		**out = **in
	}
	if in.UseCsrSans != nil {
		in, out := &in.UseCsrSans, &out.UseCsrSans
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretBackendRoleParameters.
func (in *SecretBackendRoleParameters) DeepCopy() *SecretBackendRoleParameters {
	if in == nil {
		return nil
	}
	out := new(SecretBackendRoleParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretBackendRoleSpec) DeepCopyInto(out *SecretBackendRoleSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretBackendRoleSpec.
func (in *SecretBackendRoleSpec) DeepCopy() *SecretBackendRoleSpec {
	if in == nil {
		return nil
	}
	out := new(SecretBackendRoleSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretBackendRoleStatus) DeepCopyInto(out *SecretBackendRoleStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretBackendRoleStatus.
func (in *SecretBackendRoleStatus) DeepCopy() *SecretBackendRoleStatus {
	if in == nil {
		return nil
	}
	out := new(SecretBackendRoleStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretBackendRootCert) DeepCopyInto(out *SecretBackendRootCert) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretBackendRootCert.
func (in *SecretBackendRootCert) DeepCopy() *SecretBackendRootCert {
	if in == nil {
		return nil
	}
	out := new(SecretBackendRootCert)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *SecretBackendRootCert) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretBackendRootCertList) DeepCopyInto(out *SecretBackendRootCertList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]SecretBackendRootCert, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretBackendRootCertList.
func (in *SecretBackendRootCertList) DeepCopy() *SecretBackendRootCertList {
	if in == nil {
		return nil
	}
	out := new(SecretBackendRootCertList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *SecretBackendRootCertList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretBackendRootCertObservation) DeepCopyInto(out *SecretBackendRootCertObservation) {
	*out = *in
	if in.Certificate != nil {
		in, out := &in.Certificate, &out.Certificate
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.IssuingCA != nil {
		in, out := &in.IssuingCA, &out.IssuingCA
		*out = new(string)
		**out = **in
	}
	if in.Serial != nil {
		in, out := &in.Serial, &out.Serial
		*out = new(string)
		**out = **in
	}
	if in.SerialNumber != nil {
		in, out := &in.SerialNumber, &out.SerialNumber
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretBackendRootCertObservation.
func (in *SecretBackendRootCertObservation) DeepCopy() *SecretBackendRootCertObservation {
	if in == nil {
		return nil
	}
	out := new(SecretBackendRootCertObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretBackendRootCertParameters) DeepCopyInto(out *SecretBackendRootCertParameters) {
	*out = *in
	if in.AltNames != nil {
		in, out := &in.AltNames, &out.AltNames
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Backend != nil {
		in, out := &in.Backend, &out.Backend
		*out = new(string)
		**out = **in
	}
	if in.BackendRef != nil {
		in, out := &in.BackendRef, &out.BackendRef
		*out = new(v1.Reference)
		**out = **in
	}
	if in.BackendSelector != nil {
		in, out := &in.BackendSelector, &out.BackendSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.CommonName != nil {
		in, out := &in.CommonName, &out.CommonName
		*out = new(string)
		**out = **in
	}
	if in.Country != nil {
		in, out := &in.Country, &out.Country
		*out = new(string)
		**out = **in
	}
	if in.ExcludeCnFromSans != nil {
		in, out := &in.ExcludeCnFromSans, &out.ExcludeCnFromSans
		*out = new(bool)
		**out = **in
	}
	if in.Format != nil {
		in, out := &in.Format, &out.Format
		*out = new(string)
		**out = **in
	}
	if in.IPSans != nil {
		in, out := &in.IPSans, &out.IPSans
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.KeyBits != nil {
		in, out := &in.KeyBits, &out.KeyBits
		*out = new(float64)
		**out = **in
	}
	if in.KeyType != nil {
		in, out := &in.KeyType, &out.KeyType
		*out = new(string)
		**out = **in
	}
	if in.Locality != nil {
		in, out := &in.Locality, &out.Locality
		*out = new(string)
		**out = **in
	}
	if in.MaxPathLength != nil {
		in, out := &in.MaxPathLength, &out.MaxPathLength
		*out = new(float64)
		**out = **in
	}
	if in.Namespace != nil {
		in, out := &in.Namespace, &out.Namespace
		*out = new(string)
		**out = **in
	}
	if in.Organization != nil {
		in, out := &in.Organization, &out.Organization
		*out = new(string)
		**out = **in
	}
	if in.OtherSans != nil {
		in, out := &in.OtherSans, &out.OtherSans
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Ou != nil {
		in, out := &in.Ou, &out.Ou
		*out = new(string)
		**out = **in
	}
	if in.PermittedDNSDomains != nil {
		in, out := &in.PermittedDNSDomains, &out.PermittedDNSDomains
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.PostalCode != nil {
		in, out := &in.PostalCode, &out.PostalCode
		*out = new(string)
		**out = **in
	}
	if in.PrivateKeyFormat != nil {
		in, out := &in.PrivateKeyFormat, &out.PrivateKeyFormat
		*out = new(string)
		**out = **in
	}
	if in.Province != nil {
		in, out := &in.Province, &out.Province
		*out = new(string)
		**out = **in
	}
	if in.StreetAddress != nil {
		in, out := &in.StreetAddress, &out.StreetAddress
		*out = new(string)
		**out = **in
	}
	if in.TTL != nil {
		in, out := &in.TTL, &out.TTL
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.URISans != nil {
		in, out := &in.URISans, &out.URISans
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretBackendRootCertParameters.
func (in *SecretBackendRootCertParameters) DeepCopy() *SecretBackendRootCertParameters {
	if in == nil {
		return nil
	}
	out := new(SecretBackendRootCertParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretBackendRootCertSpec) DeepCopyInto(out *SecretBackendRootCertSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretBackendRootCertSpec.
func (in *SecretBackendRootCertSpec) DeepCopy() *SecretBackendRootCertSpec {
	if in == nil {
		return nil
	}
	out := new(SecretBackendRootCertSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretBackendRootCertStatus) DeepCopyInto(out *SecretBackendRootCertStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretBackendRootCertStatus.
func (in *SecretBackendRootCertStatus) DeepCopy() *SecretBackendRootCertStatus {
	if in == nil {
		return nil
	}
	out := new(SecretBackendRootCertStatus)
	in.DeepCopyInto(out)
	return out
}
