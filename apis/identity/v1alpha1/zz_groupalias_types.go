/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type GroupAliasObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type GroupAliasParameters struct {

	// ID of the group to which this is an alias.
	// +crossplane:generate:reference:type=Group
	// +kubebuilder:validation:Optional
	CanonicalID *string `json:"canonicalId,omitempty" tf:"canonical_id,omitempty"`

	// +kubebuilder:validation:Optional
	CanonicalIDRef *v1.Reference `json:"canonicalIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	CanonicalIDSelector *v1.Selector `json:"canonicalIdSelector,omitempty" tf:"-"`

	// Mount accessor to which this alias belongs to.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-jet-vault/apis/auth/v1alpha1.Backend
	// +crossplane:generate:reference:extractor=github.com/crossplane-contrib/provider-jet-vault/config/identity.AccessorExtractor()
	// +kubebuilder:validation:Optional
	MountAccessor *string `json:"mountAccessor,omitempty" tf:"mount_accessor,omitempty"`

	// +kubebuilder:validation:Optional
	MountAccessorRef *v1.Reference `json:"mountAccessorRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	MountAccessorSelector *v1.Selector `json:"mountAccessorSelector,omitempty" tf:"-"`

	// Name of the group alias.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Target namespace. (requires Enterprise)
	// +kubebuilder:validation:Optional
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`
}

// GroupAliasSpec defines the desired state of GroupAlias
type GroupAliasSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     GroupAliasParameters `json:"forProvider"`
}

// GroupAliasStatus defines the observed state of GroupAlias.
type GroupAliasStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        GroupAliasObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// GroupAlias is the Schema for the GroupAliass API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vaultjet}
type GroupAlias struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              GroupAliasSpec   `json:"spec"`
	Status            GroupAliasStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// GroupAliasList contains a list of GroupAliass
type GroupAliasList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []GroupAlias `json:"items"`
}

// Repository type metadata.
var (
	GroupAlias_Kind             = "GroupAlias"
	GroupAlias_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: GroupAlias_Kind}.String()
	GroupAlias_KindAPIVersion   = GroupAlias_Kind + "." + CRDGroupVersion.String()
	GroupAlias_GroupVersionKind = CRDGroupVersion.WithKind(GroupAlias_Kind)
)

func init() {
	SchemeBuilder.Register(&GroupAlias{}, &GroupAliasList{})
}
